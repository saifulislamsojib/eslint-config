export default {
  /**
    off some import rules that no needed for typescript.
    TypeScript provides the same checks as part of standard type checking
  */
  'import-x/named': 'off',
  'import-x/namespace': 'off',
  'import-x/default': 'off',
  'import-x/export': 'off',
  'import-x/no-named-as-default-member': 'off',
  // strict rules
  '@typescript-eslint/no-extraneous-class': 'error',
  '@typescript-eslint/no-invalid-void-type': 'error',
  '@typescript-eslint/prefer-literal-enum-member': 'error',
  '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
  '@typescript-eslint/unified-signatures': [
    'error',
    { ignoreOverloadsWithDifferentJSDoc: true },
  ],
  // strict type checked rules
  '@typescript-eslint/no-meaningless-void-operator': 'error',
  '@typescript-eslint/no-deprecated': 'error',
  '@typescript-eslint/no-misused-spread': 'error',
  '@typescript-eslint/no-mixed-enums': 'error',
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
  '@typescript-eslint/no-unnecessary-template-expression': 'error',
  '@typescript-eslint/no-unnecessary-type-arguments': 'error',
  '@typescript-eslint/no-unnecessary-type-conversion': 'error',
  '@typescript-eslint/prefer-return-this-type': 'error',
  '@typescript-eslint/no-unnecessary-condition': [
    'error',
    {
      allowConstantLoopConditions: 'only-allowed-literals',
      checkTypePredicates: true,
    },
  ],
  '@typescript-eslint/restrict-plus-operands': [
    'error',
    {
      allowAny: false,
      allowBoolean: false,
      allowNullish: false,
      allowRegExp: false,
    },
  ],
  // stylistic rules
  '@typescript-eslint/array-type': 'error',
  '@typescript-eslint/adjacent-overload-signatures': 'error',
  '@typescript-eslint/consistent-generic-constructors': 'error',
  '@typescript-eslint/consistent-indexed-object-style': 'error',
  '@typescript-eslint/consistent-type-assertions': 'error',
  '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
  '@typescript-eslint/no-confusing-non-null-assertion': 'error',
  'no-empty-function': 'off',
  '@typescript-eslint/no-empty-function': 'error',
  '@typescript-eslint/no-inferrable-types': 'error',
  '@typescript-eslint/prefer-for-of': 'error',
  '@typescript-eslint/prefer-function-type': 'error',
  '@typescript-eslint/class-literal-property-style': 'error',
  // stylistic type checked rules
  'dot-notation': 'off',
  '@typescript-eslint/dot-notation': 'error',
  '@typescript-eslint/non-nullable-type-assertion-style': 'error',
  '@typescript-eslint/prefer-find': 'error',
  '@typescript-eslint/prefer-includes': 'error',
  '@typescript-eslint/prefer-optional-chain': 'error',
  '@typescript-eslint/prefer-regexp-exec': 'error',
  '@typescript-eslint/prefer-string-starts-ends-with': 'error',
  // other rules
  '@typescript-eslint/consistent-type-exports': [
    'error',
    { fixMixedExportsWithInlineTypeSpecifier: true },
  ],
  '@typescript-eslint/consistent-type-imports': 'error',
  'default-param-last': 'off',
  '@typescript-eslint/default-param-last': 'error',
  '@typescript-eslint/method-signature-style': 'error',
  '@typescript-eslint/no-import-type-side-effects': 'error',
  'no-loop-func': 'off',
  '@typescript-eslint/no-loop-func': 'error',
  '@typescript-eslint/no-unnecessary-parameter-property-assignment': 'error',
  '@typescript-eslint/no-unnecessary-qualifier': 'error',
  'no-use-before-define': 'off',
  '@typescript-eslint/no-use-before-define': 'error',
  'no-useless-constructor': 'off',
  '@typescript-eslint/no-useless-constructor': 'error',
  '@typescript-eslint/no-useless-empty-export': 'error',
  '@typescript-eslint/parameter-properties': 'error',
  '@typescript-eslint/prefer-enum-initializers': 'error',
  'class-methods-use-this': 'off',
  '@typescript-eslint/class-methods-use-this': 'error',
};
